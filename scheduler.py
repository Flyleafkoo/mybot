import schedule
import time
import logging
from datetime import datetime, timedelta
import telebot


class Scheduler:
    def __init__(self, bot_token, group_ids, specific_group_id, employee_database):
        self.bot = telebot.TeleBot(bot_token)
        self.group_ids = group_ids
        self.specific_group_id = specific_group_id
        self.employee_database = employee_database
        self.setup_logging()
        self.setup_schedule()

    def setup_logging(self):
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        file_handler = logging.FileHandler('bot.log')
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        logging.getLogger().addHandler(file_handler)
        logging.getLogger().addHandler(console_handler)

    def setup_schedule(self):
        schedule.every().day.at("08:30").do(self.send_good_morning)
        schedule.every().day.at("09:00").do(self.send_birthday_messages)
        schedule.every().day.at("13:00").do(self.send_monthly_update)
        schedule.every().day.at("12:00").do(self.send_message_25)
        schedule.every().day.at("09:00").do(self.send_last_workday_message)
        schedule.every().day.at("09:00").do(self.send_first_workday_message)


    def send_good_morning(self):
        now = datetime.now()
        if now.weekday() >= 5:  # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            logging.info("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return

        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
        try:
            if not self.group_ids:
                logging.warning("–°–ø–∏—Å–æ–∫ group_ids –ø—É—Å—Ç!")
                return
            for group_id in self.group_ids:
                try:
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {group_id}")
                    result = self.bot.send_message(group_id, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ñ–µ–ª–∞—é –≤—Å–µ–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!')
                    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    def send_message_25(self):
        now = datetime.now()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è 23 —á–∏—Å–ª–æ –∏ –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π
        if now.day != 23 or now.weekday() >= 5:  # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ 23 —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return


        logging.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
        try:
            if not self.group_ids:
                logging.warning("–°–ø–∏—Å–æ–∫ group_ids –ø—É—Å—Ç!")
                return
            for group_id in self.group_ids:
                try:
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {group_id}")
                    result = self.bot.send_message(group_id, '–ö–æ–ª–ª–µ–≥–∏! –Ω–µ –∑–∞–±—ã–≤–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∂—É—Ä–Ω–∞–ª—ã –¥–æ 25—á–∏—Å–ª–∞!')
                    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def send_monthly_update(self):
        now = datetime.now()
        if now.day != 15 or now.day != 30:
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ 15 –∏ –Ω–µ 30 —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return

        logging.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
        try:
            if not self.group_ids:
                logging.warning("–°–ø–∏—Å–æ–∫ group_ids –ø—É—Å—Ç!")
                return
            for group_id in self.group_ids:
                try:
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {group_id}")
                    result = self.bot.send_message(group_id, '–ö–æ–ª–ª–µ–≥–∏! –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ!')
                    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def send_last_workday_message(self):
        now = datetime.now()
        last_day = (now.replace(day=28) + timedelta(days=4)).replace(day=1) - timedelta(days=1)
        while last_day.weekday() >= 5:
            last_day -= timedelta(days=1)
        if now.date() == last_day.date():
            if self.specific_group_id:
                message = "–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é!"
                self._send_to_specific_group(message)
        else:
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞")



    def send_first_workday_message(self):
        now = datetime.now()
        first_day = now.replace(day=1)

        # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if first_day.weekday() >= 5:  # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π
            first_workday = first_day + timedelta(days=(7 - first_day.weekday()))
        else:
            first_workday = first_day

        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if now.date() == first_workday.date():
            if self.specific_group_id:
                message = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü."
                self._send_to_specific_group(message)
        else:
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞")

    def get_message_dates(self):
        now = datetime.now()
        fifteenth = now.replace(day=15)
        last_day_of_month = (now.replace(day=28) + timedelta(days=4)).replace(day=1) - timedelta(days=1)
        last_weekday = last_day_of_month - timedelta(days=(last_day_of_month.weekday() + 1) % 7)
        return fifteenth, last_weekday

    def _send_to_groups(self, message):
        for group_id in self.group_ids:
            try:
                logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {group_id}")
                result = self.bot.send_message(group_id, message)
                logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

    def _send_to_specific_group(self, message):
        try:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É: {self.specific_group_id}")
            result = self.bot.send_message(self.specific_group_id, message)
            logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {self.specific_group_id}: {e}")

    def send_birthday_messages(self):
        birthdays = self.employee_database.get_birthdays_today()
        if birthdays:
            message = "–° –î–ù–ï–ú –†–û–ñ–î–ï–ù–ò–Ø! üéâ " + ", ".join(birthdays)
            self._send_to_groups(message)
        else:
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤.")

def run_scheduler():
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    while True:
        logging.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        schedule.run_pending()
        time.sleep(100)

